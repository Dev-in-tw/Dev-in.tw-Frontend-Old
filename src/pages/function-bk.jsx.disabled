{/* {!emptyInput &&
validInputSyntax &&
validInputLength ? (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth="1.5"
        stroke="currentColor"
        className="flex-none ml-[20px] w-6 h-6"
    >
        <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        />
    </svg>
) : (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth="1.5"
        stroke="currentColor"
        className="flex-none ml-[20px] w-6 h-6"
    >
        <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M6 18L18 6M6 6l12 12"
        />
    </svg>
)} */}







{/* <div className={styles.checkList}>
    <label className={styles.checkbox}>
        <input
            type="checkbox"
            name="syntax"
            checked={
                validInputSyntax && !emptyInput
            }
            readOnly
        />
        Only contain English alphabet, Numbers,
        and Hyphen
    </label>
    <label className={styles.checkbox}>
        <input
            type="checkbox"
            name="length"
            checked={
                validInputLength && !emptyInput
            }
            readOnly
        />
        Maximum length: 63 characters
    </label>
</div> */}







 /* 
    Input is valid when matching all the following two state:
        - Only contain English alphabet, Numbers, and Hyphen
        - Length is less then 64 (max 63)

    Note: Input will be also valid if it is empty.
    */
    function checkInputOnInput(inputEvent) {
        const inputValue = inputEvent.target.value;

        if (inputValue.match(/[a-zA-Z0-9-]+/gu)) {
            setEmptyInput(false);

            // The following state needs to be improved (can't start or ends with Hyphen?)
            if (inputValue.match(/[a-zA-Z0-9-]+/gu)[0] === inputValue) {
                console.log("Valid input");
                setValidInputSyntax(true);
            } else {
                setValidInputSyntax(false);
            }

            if (inputValue.length <= 63) {
                setValidInputLength(true);
            } else {
                setValidInputLength(false);
            }
            return;
        } else if (inputValue === "") {
            console.log("Valid input (Empty)");
            setEmptyInput(true);
            setValidInputSyntax(false);
            setValidInputLength(false);
            return;
        }
        console.warn("Invalid input value");
        setEmptyInput(false);
        setValidInputSyntax(false);
        setValidInputLength(false);
    }



    const [validInputSyntax, setValidInputSyntax] = useState(true);
    const [validInputLength, setValidInputLength] = useState(true);
    const [emptyInput, setEmptyInput] = useState(true);